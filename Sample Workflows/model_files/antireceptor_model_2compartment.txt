# In-vivo 2 compartment model with both micro and macro constants
#
# Goal: This model introduces new hires to the structure and
# syntax of reaction models to be run on the QSP notebook.
#
# Features: This model will simulate a drug in-vivo with: 
#   - 2 3D compartment
#   - 2 Monospecific antibodies ("Ab1", "Ab2")
#   - 2 Receptor ("R1", "R2")
#
# This model file contains two identical drugs and receptors and demonstrates both the micro and macro constant method for
# writing binding, transport, synthesis, and degradation reactions. Receptor and drug 1 utilize the miroconstant method
# while receptor and drug 2 utilize the macroconstant method
#
#
# For more details on different aspects of the model file, see the antireceptor_model_1compartment.txt file. This will cover
# model syntax in more detail

%% ReactionModel@2

initialization = steady_state(time_scale = 86400:s)

time_unit = s

default_state_unit = nmol

% components

######################################################################################
# Parameters

# Parameters defining initial conditions
volume_central      := 5:L
volume_peripheral   := 13:L
R_per_cell          := 1e4
cell_per_mL         := 1e6:(1/mL)

# Parameters defining rates
kon         := 0.001:(1/nM/s) 
kd_mab            := 0.1:nM 
el_half          := 28:d   
abs_half           := 2.5:d
R_half           := 60:min 
Pdist                 := 0.12
Tdist_hr          := 12:hr 

# Parameters for dosing drug
BW                 := 70:kg
mw           := 150000:(g/mol) 
interval           := 21:d 
dose         := 1:(mg/kg) 
dose_count            := 7


######################################################################################
# Assignments
#
# The syntax of a rule is:
# rule_name: unit = numerical expression

# Conversion factors (those with just values could have been defined as parameters)
mL_per_L             = 1e3:(mL/L)  
mg_per_g               = 1e3:(mg/g)
ug_per_g              = 1e6:(ug/g) 
nmol_per_mol      = 1e9:(nmol/mol) 
SECONDS_PER_MINUTE:(s/min)    = 60:(s/min)
SECONDS_PER_HOUR:(s/hr)     = SECONDS_PER_MINUTE * 60:(min/hr)
SECONDS_PER_DAY:(s/d)         = SECONDS_PER_HOUR * 24:(hr/d)
N_AV                 = 6.022e23:(1/mol) 

# Note that when annotating units, the unit ":" operator has operator precedence over 
# everything. For example, 1/24:hr would be the same as 1/(24:hr) rather than (1/24):hr.

# Macroparameter to microparameter conversions
# As best practice, microparameters are defined with the amount units of nmol, and time units of s.
# When a microparameter deviates from this practice, it is best to label that parameter with the units.

ugml_per_nM            = mw * ug_per_g / mL_per_L / nmol_per_mol
kabs                   = log(2) / (abs_half * SECONDS_PER_DAY)
kclear_Ab1             = log(2) / (el_half * SECONDS_PER_DAY)

kon_Ab1_R1              = kon
koff_Ab1_R1             = kd_mab * kon
kon_Ab2_R2              = kon

kclear_R1              = log(2) / (R_half * SECONDS_PER_MINUTE)
kclear_Ab1_R1           = kclear_R1

Tdist                  = Tdist_hr * SECONDS_PER_HOUR

# Defining initial state values
total_cells_central    = cell_per_mL * volume_central * mL_per_L
total_R1_central       = R_per_cell * total_cells_central / N_AV * nmol_per_mol
R1_central_0           = total_R1_central

total_R2_central       = R_per_cell * total_cells_central / N_AV * nmol_per_mol
R2_central_0           = total_R2_central

ksynth_R1_central      = kclear_R1 * R1_central_0

#Transport
R_Ab1_12                    = log(2)/ (Tdist_hr * SECONDS_PER_HOUR)

k_Ab1_12                    = R_Ab1_12*Pdist/(Pdist + volume_central/volume_peripheral)
k_Ab1_21                    = R_Ab1_12/(1 + Pdist*volume_peripheral/volume_central)

######################################################################################
# Routes
# The syntax of a route is:
# name: amount_unit = schedule; state1 += amt, state2 += amt * multiplier ...
#
# Any routes listed here will automatically be applied when running a simulation. If you have multiple routes that
# you plan to swap between, you should set them to an empty schedule ("null") to ensure you don't have multiple routes
# applied at once or have to remember to turn them off before simulation.
# To turn on a dose route, you should give the route a non-empty schedule when defining a model reference.

# This takes an nmol amount @ time zero and applies it to the free drug or subcutaneous drug as a 1-1 dose. 
#

IVboth_mpk: mg/kg = @(); Ab1_00_central += amt * (nmol_per_mol * BW) / (mg_per_g * mw),  Ab2_00_central += amt * (nmol_per_mol * BW) / (mg_per_g * mw)

######################################################################################
# Compartments

# The syntax of a compartment is:
# name~dimension = size

central~3 = volume_central
peripheral~3 = volume_peripheral


######################################################################################
# States
# The syntax of a state is:
# name@compartment: unit *= initial_value

Ab1_depot@central*         = 0
Ab2_depot@central*         = 0

R1_central@central*       = R1_central_0
R2_central@central*       = R2_central_0

Ab1_00_central@central*    = 0
Ab1_R1_central@central*    = 0

Ab2_00_central@central*    = 0
Ab2_R2_central@central*    = 0

Ab1_peripheral@peripheral* = 0
Ab2_peripheral@peripheral* = 0

######################################################################################
# Reactions
#
# Depot reactions
Ab1_depot     -> Ab1_00_central;  kf = kabs
Ab2_depot     -> Ab2_00_central;  kf = kabs

#Synthesis and degradation reactions
              <-> R1_central;      kf = ksynth_R1_central, kr = kclear_R1

              <-> R2_central;      css=total_R2_central/volume_central, thalf=R_half * SECONDS_PER_MINUTE

# Drug degradation reactions
Ab1_00_central ->;                 kf = kclear_Ab1
Ab1_R1_central ->;                 kf = kclear_Ab1_R1

Ab2_00_central ->;                 thalf = el_half * SECONDS_PER_DAY
Ab2_R2_central ->;                 thalf = R_half * SECONDS_PER_MINUTE


Ab1_peripheral ->;              kf = kclear_Ab1
Ab2_peripheral ->;              thalf = el_half * SECONDS_PER_DAY

# Drug Binding
R1_central + Ab1_00_central <-> Ab1_R1_central;               kf = kon_Ab1_R1, kr = koff_Ab1_R1

R2_central + Ab2_00_central <-> Ab2_R2_central;               kd = kd_mab, kon = kon_Ab2_R2

# Drug Transport
Ab1_00_central <-> Ab1_peripheral;                 kf = k_Ab1_12, kr = k_Ab1_21
Ab2_00_central <-> Ab2_peripheral;                 pdist = Pdist, tdist = Tdist


######################################################################################
# Outputs of the model are just assignments, but it makes sense to define them at
# the end of the model. Best practice is to assign units to outputs to make sure 
# units are as expected.

# Defining model readouts 
free_R1_central      :(nmol)  = R1_central
free_drug1_central    :(nmol)  = Ab1_00_central
bound_drug1_central   :(nmol)  = Ab1_R1_central
total_drug1_central   :(nmol)  = Ab1_00_central + Ab1_R1_central


free_R2_central      :(nmol)  = R2_central
free_drug2_central    :(nmol)  = Ab2_00_central
bound_drug2_central   :(nmol)  = Ab2_R2_central
total_drug2_central   :(nmol)  = Ab2_00_central + Ab2_R2_central

RO1 = Ab1_R1_central / (R1_central + Ab1_R1_central) * 100
RO2 = Ab2_R2_central / (R2_central + Ab2_R2_central) *100

# Functions
# There are several functions that can be used for outputs, which are listed here. These functions are
# retooled sympy functions, so you can reference the sympy documentation for each function.
# List of functions
# exp(x) - returns e^x
# log(x) - returns ln(x)
# log2(x) - returns log base 2 of x
# log10(x) - returns log base 10 of x
# sqrt(x) - returns square root of x
# pow(x, y) - returns x^y 
# floor(x) - returns x rounded down to the nearest whole number
# ceil(x) - returns x rounded up to the nearest whole number
# sin(x)
# cos(x)
# tan(x)
# mean(x, start time, stop time)
# max(x, start time, stop time)
# min(x, start time, stop time)
