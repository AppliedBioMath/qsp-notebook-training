%% ReactionModel@2

initialization     = steady_state(time_scale=10*24*60*60:s)

time_unit          = s
default_state_unit = 1

% components

#---------------------------------------------------------------------------------------
# PARAMETERS
#---------------------------------------------------------------------------------------

# Compartment volumes
#--------------------
vol_central                := 3:L
vol_blood                  := 5:L

# cellular
amp_cfu_operating          := 32            # cfu amplification                                  
tau_cfu_d                  := 20:d          # cfu residence time
tau_mk_h                   := 1:hr          # mk residence time
plt_per_mk                 := 2380          # avg platelets produced by one mk
pltss_per_L                := 3e9:(1/L)     # plt baseline (blood measurement)
tau_plt_d                  := 4:d           # typical platelet lifetime

# feedback
feedback_fold              := 10            # maximum fold change in amp_cfu due to negative feedback

# reset period
tau_reset_d                := 1:d


#---------------------------------------------------------------------------------------
# RELATIONSHIPS
#---------------------------------------------------------------------------------------

# Conversion factors
mL_per_L                    = 1e3:(mL/L)
mg_per_g                    = 1e3:(mg/g)
ug_per_g                    = 1e6:(ug/g) 
nmol_per_mol                = 1e9:(nmol/mol)
SECONDS_PER_MINUTE          = 60:(s/min)
MINUTES_PER_HOUR            = 60:(min/hr) 
SECONDS_PER_HOUR            = SECONDS_PER_MINUTE * MINUTES_PER_HOUR
HOURS_PER_DAY               = 24:(hr/d) 
SECONDS_PER_DAY:(s/d)       = SECONDS_PER_HOUR * HOURS_PER_DAY
N_AV                        = 6.022e23:(1/mol)


# cellular dynamics (to get a desired PLTss)
pltss             = pltss_per_L * vol_blood
kdeath_plt        = 1 / (tau_plt_d  * SECONDS_PER_DAY)
kdeath_mk         = 1 / (tau_mk_h   * SECONDS_PER_HOUR)
k_mk2plt          = plt_per_mk * kdeath_mk                           # calculated using PLTsperMK = k_MK2PLT/kdeath_MK
mkss              = pltss *  kdeath_plt / k_mk2plt                   # calculated using PLTss = k_MK2PLT * MKss / kdeath_PLT
cfuss             = kdeath_mk * mkss/(amp_cfu_operating/tau_cfu)     # calculated using MKss = k_CFU2MK * CFUss/kdeath_MK; k_CFU2MK = amp_CFU / tau_CFU
tau_cfu           = tau_cfu_d * SECONDS_PER_DAY
kin_cfu           = cfuss / tau_cfu                                  # arrival rate of CFU-MKs at homeostasis, assuming 100% BM o/p


# feedback/killing 
amp_cfu           =  amp_cfu_operating * feedback_fold * exp(-log(feedback_fold) * plt/pltss)   # negative feedback
krep_cfu          = (amp_cfu - 1) / tau_cfu
k_cfu2mk          =  amp_cfu / tau_cfu



#---------------------------------------------------------------------------------------
# States 
#---------------------------------------------------------------------------------------

# compartments
central               ~ 3         = vol_central

# states
cfu                  @ central       *= 0
mk                   @ central       *= 0
plt                  @ central       *= 0


#---------------------------------------------------------------------------------------
# Reactions 
#---------------------------------------------------------------------------------------

# CEMTRAL
#--------------
               -> cfu;                    kf = kin_cfu
cfu            -> cfu + cfu;              rf = krep_cfu * cfu                       # analytical (krep_CFU depends on the feedback)
cfu            -> mk;                     rf = k_cfu2mk * cfu                       # analytical
mk             -> ;                       kf = kdeath_mk
mk             -> mk + plt;               rf = k_mk2plt * mk            
plt            -> ;                       rf = kdeath_plt * plt

#---------------------------------------------------------------------------------------
# Jumps 
#---------------------------------------------------------------------------------------
tau_reset = tau_reset_d * SECONDS_PER_DAY           # reset period
reset_plt = @(start= 0:s, interval=tau_reset, n=5);   plt = 1e3


#---------------------------------------------------------------------------------------
# OUTPUTS 
#---------------------------------------------------------------------------------------
plt_per_nL        = plt/ (vol_blood * 1e9)       # Platelets x 1e9 per L
